/* Plugin generated by AMXX-Studio */

#include < amxmodx >
#include < amxmisc >
#include < fakemeta >
#include < colorchat >

#define EVO
#pragma tabsize 0
#pragma compress 1


//#define BUG_TNI
//#define JUST_ADMINS


#if !defined BUG_TNI
#define METHOD 2
#endif



#define PLUGIN "Nick Registration"
#define VERSION "0.0.2X"

new const g_szInfoKey[ ] = "_reg";
new const g_szNoneWord[ ] = "None";
new const g_szTag[ ] = "^x04|^x03 REGISTER-SYS^x01:";

enum _:eRegisterInfos
{
	Nick[ 32 ],
	Password[ 32 ],
	Mail[ 64 ]
}

new nume[ 32 ],HostName[ 65 ],Array:g_aData,g_szLoginInfo[ 33 ][ eRegisterInfos ],g_iRegistrations = 0,g_szRegisterFile[ 64 ]
static szPasswordxx[ 32 ],szIp[ 22 ], szAuthID[ 35 ]


//#define LICENTA_PRIN_IP_PORT

#if defined LICENTA_PRIN_IP_PORT
#include <licenta>
#endif


//#define LICENTA_PRIN_MODEL

#if defined LICENTA_PRIN_MODEL
#include <licentax>
#define IP "89.34.25.64"

public plugin_precache()
{
CheckServer(IP);
}
#endif


//#define LICENTA_PRIN_IP_PORTx

#if defined LICENTA_PRIN_IP_PORTx
#include <licentay>
#define IP "89.34.25.64:27015"
#define SHUT_DOWN 0
#endif


#define LICENTA_PRIN_EXPIRARE

#if defined LICENTA_PRIN_EXPIRARE
#include <licentaz>
#endif


public plugin_init( )
{
#if defined LICENTA_PRIN_IP_PORT
licenta()
#endif


#if defined LICENTA_PRIN_IP_PORTx
UTIL_CheckServerLicense(IP,SHUT_DOWN);
#endif


#if defined LICENTA_PRIN_EXPIRARE
licenta( );
#endif


	register_plugin( PLUGIN, VERSION, "Askhanar&evo" );
	
	register_clcmd( "say /registernick", "ClCmdSayRegisterNick" );
	register_clcmd( "say_team /registernick", "ClCmdSayRegisterNick" );
	register_clcmd( "say registernick", "ClCmdSayRegisterNick" );
	register_clcmd( "say_team registernick", "ClCmdSayRegisterNick" );
	register_clcmd( "say /register", "ClCmdSayRegisterNick" );
	register_clcmd( "say_team /register", "ClCmdSayRegisterNick" );
	register_clcmd( "say register", "ClCmdSayRegisterNick" );
	register_clcmd( "say_team register", "ClCmdSayRegisterNick" );
	register_clcmd( "say /reg", "ClCmdSayRegisterNick" );
	register_clcmd( "say_team /reg", "ClCmdSayRegisterNick" );
	register_clcmd( "say reg", "ClCmdSayRegisterNick" );
	register_clcmd( "say_team reg", "ClCmdSayRegisterNick" );

	register_clcmd( "RN_SetPassword", "__RN_SetPassword" );
	register_clcmd( "RN_SetMail", "__RN_SetMail" );
	
	register_forward( FM_ClientUserInfoChanged, "fwd_ClientUserInfoChangedPost", false );
	g_aData = ArrayCreate( eRegisterInfos );

	set_task( 250.0, "AVERTIZE", 0, _, _, "b" );
}

public AVERTIZE( )
{
	get_cvar_string( "hostname", HostName, charsmax( HostName ) );

#if defined BUG_TNI
	for( new id = 1; id < get_maxplayers( ); ++id )
	{
		if( is_user_connected( id ) && !is_user_bot( id ) || !is_user_hltv( id ) )
		{
		get_user_name( id, nume, sizeof ( nume ) -1 );
#if defined JUST_ADMINS
		if( is_user_admin( id ) )	if( !/*UserIsRegistered*/CheckRegistration( id, nume ) && containi( nume, HostName ) == -1 )	ColorChat( id, NORMAL, "%s^x04 OH^x01! Se pare ca esti^x03 ADMIN^x01, dar nu ai^x04 CONT^x01..Creeaza Imediat unul prin comanda^x03 /reg^x01 !", g_szTag );
#else
		if( !CheckRegistration( id, nume ) && containi( nume, HostName ) == -1 )	ColorChat( id, NORMAL, "%s^x04 OH^x01! Se pare ca nu esti^x03 INREGISTRAT^x01..Inregistreaza-te Imediat prin comanda^x04 /reg^x01 !", g_szTag );
#endif
		}
	}
#else
	#if METHOD == 1
	new iPlayers[ 32 ], iPlayersNum, y, id;
	get_players( iPlayers, iPlayersNum, "ch" );

	if( !iPlayersNum )	return;

	for( y = 1; y < iPlayersNum; ++y )
	{
		id = iPlayers[ y ];

		get_user_name( id, nume, sizeof ( nume ) -1 );
#if defined JUST_ADMINS
		if( is_user_admin( id ) )	if( !CheckRegistration( id, nume ) && containi( nume, HostName ) == -1 )	xCoLoR( id, "%s!v OH!n! Se pare ca esti!e ADMIN!n, dar nu ai!v CONT!n..Creeaza Imediat unul prin comanda!e /reg!n !", g_szTag );
#else
		if( !CheckRegistration( id, nume ) && containi( nume, HostName ) == -1 )	xCoLoR( id, "%s!v OH!n! Se pare ca nu esti!e INREGISTRAT!n..Inregistreaza-te Imediat prin comanda!v /reg!n !", g_szTag );
#endif
	}
	#endif
	#if METHOD == 2
	for( new id = 1; id <= get_maxplayers( ); id++ )
	{
		get_user_name( id, nume, sizeof ( nume ) -1 );
#if defined JUST_ADMINS
		if( is_user_admin( id ) )	if( !CheckRegistration( id, nume ) && containi( nume, HostName ) == -1 )	xCoLoR( id, "%s!v OH!n! Se pare ca esti!e ADMIN!n, dar nu ai!v CONT!n..Creeaza Imediat unul prin comanda!e /reg!n !", g_szTag );
#else
		if( !CheckRegistration( id, nume ) && containi( nume, HostName ) == -1&&!is_user_admin(id) )	xCoLoR( id, "%s!v OH!n! Se pare ca nu esti!e INREGISTRAT!n..Inregistreaza-te Imediat prin comanda!v /reg!n !", g_szTag );
#endif
	}
	#endif
#endif
}

public plugin_cfg( )	LoadRegistrations( );

public client_authorized( id )
{
	get_user_name( id, nume, sizeof ( nume ) -1 );
	get_cvar_string( "hostname", HostName, charsmax( HostName ) );
	
#if defined JUST_ADMINS
	if( is_user_admin( id ) )
	{
#endif
	if( CheckRegistration( id, nume ) && containi( nume, HostName ) == -1 )
	{
		get_user_info( id, g_szInfoKey, szPasswordxx, sizeof ( szPasswordxx ) -1 );
		get_user_ip( id, szIp, sizeof ( szIp ) -1, 1 );
		get_user_authid( id, szAuthID, sizeof ( szAuthID ) -1 );
		
		if( equal( szPasswordxx, g_szLoginInfo[ id ][ Password ] ) )
		{
			ColorChat( id, NORMAL, "%s Ai fost logat cu^x04 Succes^x01!^nNick:^x03 %s^n^x01Parola:^x04 %s^n^x01E-Mail:^x03 %s", g_szTag,
				g_szLoginInfo[ id ][ Nick ], g_szLoginInfo[ id ][ Password ], g_szLoginInfo[ id ][ Mail ] );
			log_to_file( "REGISTER-SYS.log", "--| %s ( %s|%s ) s-a logat cu succes( Parola: %s, E-Mail: %s )",
				nume, szIp, szAuthID, g_szLoginInfo[ id ][ Password ], g_szLoginInfo[ id ][ Mail ] );
			
			return PLUGIN_HANDLED;
		}
		else
		{
			server_cmd( "kick #%i ^"Nick rezervat! Model de introducere a parolei: setinfo %s parola^"",
				get_user_userid( id ), g_szInfoKey );
			if( equal( szPasswordxx, "" ) )	format( szPasswordxx, charsmax( szPasswordxx ), "^"^"" );
			log_to_file( "REGISTER-SYS.log", "--| %s ( %s|%s ) Parola %s este gresita! ( Parola corecta: %s )",
				nume, szIp, szAuthID, szPasswordxx, g_szLoginInfo[ id ][ Password ] );
		}
	}
#if defined JUST_ADMINS
	}
#endif
	return PLUGIN_CONTINUE;
}

public fwd_ClientUserInfoChangedPost( id, InfoKey )
{
	if( !is_user_connected( id ) /*|| is_user_connecting( id )*/ )	return FMRES_IGNORED;
	
	new szNewName[ 32 ];
	get_user_name( id, nume, sizeof ( nume ) -1 );
	get_cvar_string( "hostname", HostName, charsmax( HostName ) );
	engfunc( EngFunc_InfoKeyValue, InfoKey, "name", szNewName, sizeof ( szNewName ) -1 );

	if( equali( nume, szNewName ) )	return FMRES_IGNORED;

	if( equali( szNewName, HostName ) )
	{
		show_menu( id, 0, "^n", 1 );
		return FMRES_IGNORED;
	}
	
#if defined JUST_ADMINS
	if( is_user_admin( id ) )
	{
#endif
	if( CheckRegistration( id, szNewName ) && !equali( szNewName, HostName ) )
	{
		get_user_info( id, g_szInfoKey, szPasswordxx, sizeof ( szPasswordxx ) -1 );
		get_user_ip( id, szIp, sizeof ( szIp ) -1, 1 );
		get_user_authid( id, szAuthID, sizeof ( szAuthID ) -1 );
		
		if( equal( szPasswordxx, g_szLoginInfo[ id ][ Password ] ) )
		{
			ColorChat( id, NORMAL, "%s Ai fost logat cu^x03 Succes^x01!^nNick:^x04 %s^n^x01Parola:^x03 %s^n^x01E-Mail:^x04 %s", g_szTag,
				g_szLoginInfo[ id ][ Nick ], g_szLoginInfo[ id ][ Password ], g_szLoginInfo[ id ][ Mail ] );
			log_to_file( "REGISTER-SYS.log", "--| %s ( %s|%s ) s-a logat cu succes( Parola: %s, E-Mail: %s )",
				szNewName, szIp, szAuthID, g_szLoginInfo[ id ][ Password ], g_szLoginInfo[ id ][ Mail ] );
		}
		else
		{
			server_cmd( "kick #%i ^"Acest nick este rezervat iar tu ai gresit parola^nModel de introducere a parolei: setinfo %s parola^"",
				get_user_userid( id ), g_szInfoKey );
			if( equal( szPasswordxx, "" ) )	format( szPasswordxx, charsmax( szPasswordxx ), "^"^"" );
			log_to_file( "REGISTER-SYS.log", "--| %s ( %s ) Parola %s este gresita! ( Parola corecta: %s )",
				szNewName, szIp, szPasswordxx, g_szLoginInfo[ id ][ Password ] );
		}
	}
#if defined JUST_ADMINS
	}
#endif
	return FMRES_IGNORED;
}

public ClCmdSayRegisterNick( id )
{
#if defined JUST_ADMINS
	if( !is_user_admin( id ) )
	{
		ColorChat( id, NORMAL, "%s Momentan, inregistrarea este optionala doar pentru^x04 ADMINI^x01!", g_szTag );
		return PLUGIN_HANDLED;
	}
#endif
	if( is_user_admin( id ) )
	{
		ColorChat( id, NORMAL, "%s Deja ai cont^x04 Registrat^x01 !", g_szTag );
		return PLUGIN_HANDLED;
	}

	get_user_name( id, nume, sizeof ( nume ) -1 );

	if( /*UserIsRegistered*/CheckRegistration( id, nume ) )
	{
		ColorChat( id, NORMAL, "%s^x04 %s^x01, acest nick este deja inregistrat!", g_szTag, nume );
		return PLUGIN_HANDLED;
	}

	get_cvar_string( "hostname", HostName, charsmax( HostName ) );

	if( containi( nume, HostName ) != -1 )
	{
		ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
		return PLUGIN_HANDLED;
	}
	
	new szMenuName[ 128 ];
	formatex( szMenuName, sizeof ( szMenuName ) -1, "\r Inregistrare Cont^n^n\wNick:\y %s \r|\w Parola:\y %s^n\wE-Mail:\y %s^n^n",
		nume, g_szLoginInfo[ id ][ Password ], g_szLoginInfo[ id ][ Mail ] );
	
	new iMenu = menu_create( szMenuName, "NR_RegisterMenu" );
	menu_additem( iMenu, "\wSeteaza parola", "1", 0 );
	menu_additem( iMenu, "\wSeteaza e-mail^n", "2", 0 );
	menu_additem( iMenu, "\rConfirma rezervarea", "3", 0 );
	
	menu_setprop( iMenu, MPROP_EXITNAME, "\wIesire" );
	menu_display( id, iMenu );
	
	return PLUGIN_CONTINUE;
}

public NR_RegisterMenu( id, iMenu, iItem )
{
	if( iItem == MENU_EXIT )
	{
		menu_destroy( iMenu );
		return PLUGIN_HANDLED;
	}

	get_user_name( id, nume, sizeof ( nume ) -1 );

	/*get_cvar_string( "hostname", HostName, charsmax( HostName ) );

	if( containi( nume, HostName ) != -1 )
	{
		ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
		return PLUGIN_HANDLED;
	}*/
	
	static _access, szInfo[ 4 ], iCallback;
	menu_item_getinfo( iMenu, iItem, _access, szInfo, sizeof ( szInfo ) -1, _, _, iCallback );
	menu_destroy( iMenu );
	
	new iKey = str_to_num( szInfo );
	switch( iKey )
	{
		case 1:
		{
			/*if( containi( szName, HostName ) != -1 )
			{
				ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
				return PLUGIN_HANDLED;
			}*/

			ColorChat( id, NORMAL, "%s Esti rugat sa scrii o parola(VEZI SUS), apoi sa apesi^x04 ENTER^x01.", g_szTag );
			client_cmd( id, "messagemode RN_SetPassword" );
			ClCmdSayRegisterNick( id );
		}
		case 2:
		{
			/*if( containi( szName, HostName ) != -1 )
			{
				ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
				return PLUGIN_HANDLED;
			}*/

			ColorChat( id, NORMAL, "%s Esti rugat sa scrii un e-mail(VEZI SUS), apoi sa apesi^x04 ENTER^x01.", g_szTag );
			client_cmd( id, "messagemode RN_SetMail" );
			ClCmdSayRegisterNick( id );
		}
		case 3:
		{
			/*if( containi( nume, HostName ) != -1 )
			{
				ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
				return PLUGIN_HANDLED;
			}*/

			if( !( equal( g_szLoginInfo[ id ][ Password ], "" ) || equal( g_szLoginInfo[ id ][ Mail ], "" ) ) )
			{
				/*if( containi( nume, HostName ) != -1 )
				{
					ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
					return PLUGIN_HANDLED;
				}*/
				
				ColorChat( id, NORMAL, "%s Ai fost inregistrat cu^x04 Succes^x01, datele fiind urmatoarele:", g_szTag );
				ColorChat( id, NORMAL, "%s Nick:^x04 %s^x01 | Parola:^x03 %s", g_szTag, nume, g_szLoginInfo[ id ][ Password ] );
				ColorChat( id, NORMAL, "%s E-Mail:^x04 %s", g_szTag, g_szLoginInfo[ id ][ Mail ] );
				ColorChat( id, NORMAL, "%s Pentru a te loga foloseste: ^"^x04setinfo %s %s^x01^"", g_szTag, g_szInfoKey, g_szLoginInfo[ id ][ Password ] );
				
				new eData[ eRegisterInfos ];
				copy( eData[ Nick ], sizeof ( eData[ Nick ] ) -1, nume );
				copy( eData[ Password ], sizeof ( eData[ Password ] ) -1, g_szLoginInfo[ id ][ Password ] );
				copy( eData[ Mail ], sizeof ( eData[ Mail ] ) -1, g_szLoginInfo[ id ][ Mail ] );
				
				ArrayPushArray( g_aData, eData );
				g_iRegistrations++;
				
				CheckRegistration( id, nume );
				
				get_user_ip( id, szIp, sizeof ( szIp ) -1 );
				get_user_authid( id, szAuthID, sizeof ( szAuthID ) -1 );
				log_to_file( "REGISTER-SYS.log", "--| %s ( %s|%s ) s-a inregistrat cu succes! [ Nick: %s | Parola: %s | E-Mail: %s ]",
					nume, szIp, szAuthID, eData[ Nick ], eData[ Password ], eData[ Mail ] );
					
				SaveRegistrations( );
			}
			else
			{
				/*if( containi( nume, HostName ) != -1 )
				{
					ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
					return PLUGIN_HANDLED;
				}*/

				ColorChat( id, NORMAL, "%s^x04 Datele pentru inregistrare sunt incomplete!", g_szTag );
				ClCmdSayRegisterNick( id );
			}
		}
	}
	
	return PLUGIN_CONTINUE;
}

public __RN_SetPassword( id )
{
	/*get_cvar_string( "hostname", HostName, charsmax( HostName ) );
	get_user_name( id, nume, sizeof ( nume ) -1 );

	if( containi( nume, HostName ) != -1 )
	{
		ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
		return PLUGIN_HANDLED;
	}*/

	static szArg[ 15 ];
	read_argv( 1, szArg, sizeof ( szArg ) -1 );
	
	if( !strlen( szArg ) || strlen( szArg ) < 6 )
	{
		ColorChat( id, NORMAL, "%s^x04 Parola NU poate fi mai mica de 6 caractere!", g_szTag );
		
		client_cmd( id, "messagemode RN_SetPassword");
		ClCmdSayRegisterNick( id );
		return PLUGIN_HANDLED;
	}
	else if( strlen( szArg ) > 15 )
	{
		ColorChat( id, NORMAL, "%s^x04 Parola NU poate fi mai mare de 15 caractere!", g_szTag );
		
		client_cmd( id, "messagemode RN_SetPassword");
		ClCmdSayRegisterNick( id );
		return PLUGIN_HANDLED;
	}
	
	copy( g_szLoginInfo[ id ][ Password ], sizeof ( g_szLoginInfo[ ][ Password ] ) -1, szArg );
	ClCmdSayRegisterNick( id );
	return PLUGIN_HANDLED;
}

public __RN_SetMail( id )
{
	/*get_cvar_string( "hostname", HostName, charsmax( HostName ) );
	get_user_name( id, nume, sizeof ( nume ) -1 );

	if( containi( nume, HostName ) != -1 )
	{
		ColorChat( id, NORMAL, "%s^x04 Nu poti inregistra acest^x03 NICK^x01!", g_szTag );
		return PLUGIN_HANDLED;
	}*/

	static szArg[ 64 ];
	read_argv( 1, szArg, sizeof ( szArg ) -1 );
	
	if( containi( szArg, "@" ) == -1 && containi( szArg, "yahoo" ) == -1
		&& containi( szArg, "gmail" ) == -1 && containi( szArg, "hotmail" ) == -1 )
	{
		ColorChat( id, NORMAL, "%s^x04 %s^x01 nu este un e-mail valid!!", g_szTag, szArg );
		
		client_cmd( id, "messagemode RN_SetMail");
		ClCmdSayRegisterNick( id );
		return PLUGIN_HANDLED;
	}
	/*else if( strlen( szArg ) < 9 )
	{
		ColorChat( id, NORMAL, "%s^x03 Un e-mail NU poate avea mai putin de 9 caractere!", g_szTag );
		
		client_cmd( id, "messagemode RN_SetMail");
		ClCmdSayRegisterNick(  id  );
		return PLUGIN_HANDLED;
	}
	else if( strlen( szArg ) > 17 )
	{
		ColorChat( id, NORMAL, "%s^x03 Un e-mail NU poate avea mai mult de 17 caractere!", g_szTag );
		
		client_cmd( id, "messagemode RN_SetMail");
		ClCmdSayRegisterNick(  id  );
		return PLUGIN_HANDLED;
	}*/
	
	copy( g_szLoginInfo[ id ][ Mail ], sizeof ( g_szLoginInfo[ ][ Mail ] ) -1, szArg );
	ClCmdSayRegisterNick( id );
	return PLUGIN_HANDLED;
}

CheckRegistration( id, const szNick[ ] )
{
	new bool:bRegistered = false;
	new eData[ eRegisterInfos ];
	
	for( new i; i < g_iRegistrations; i++ )
	{
		ArrayGetArray( g_aData, i, eData );
		
		if( equal( szNick, eData[ Nick ] ) )
		{
			copy( g_szLoginInfo[ id ][ Nick ], sizeof ( g_szLoginInfo[ ][ Nick ] ) -1, eData[ Nick ] );
			copy( g_szLoginInfo[ id ][ Password ], sizeof ( g_szLoginInfo[ ][ Password ] ) -1, eData[ Password ] );
			copy( g_szLoginInfo[ id ][ Mail ], sizeof ( g_szLoginInfo[ ][ Mail ] ) -1, eData[ Mail ] );
			bRegistered = true;
			break;
		}
	}
	
	/*if( !bRegistered )
	{
		copy( g_szLoginInfo[ id ][ Nick ], sizeof ( g_szLoginInfo[ ][ Nick ] ) -1, g_szNoneWord );
		copy( g_szLoginInfo[ id ][ Password ], sizeof ( g_szLoginInfo[ ][ Password ] ) -1, g_szNoneWord );
		copy( g_szLoginInfo[ id ][ Mail ], sizeof ( g_szLoginInfo[ ][ Mail ] ) -1, g_szNoneWord );
	}*/
			
	return bRegistered;
}

LoadRegistrations( )
{
	get_localinfo( "amxx_datadir", g_szRegisterFile, sizeof ( g_szRegisterFile ) -1 );
	format( g_szRegisterFile, sizeof ( g_szRegisterFile ) -1, "%s/REGISTER-SYS.txt", g_szRegisterFile );
	
	if( g_iRegistrations )
	{
		ArrayClear( g_aData );
		g_iRegistrations = 0;
	}
	
	if( file_exists( g_szRegisterFile ) )
	{
		new iFile = fopen( g_szRegisterFile, "rt" );
		new szNickx[ 32 ], szPasswordx[ 32 ], szMail[ 64 ],szFileData[ 128 ], eData[ eRegisterInfos ];
		
		while( !feof( iFile ) )
		{
			fgets( iFile, szFileData, sizeof ( szFileData ) - 1 );
			
			if( !szFileData[ 0 ] || szFileData[ 0 ] == ';'
				|| ( szFileData[ 0 ] == '/' && szFileData[ 1 ] == '/' ) )
				continue;
			
			parse( szFileData, szNickx, sizeof ( szNickx ) -1,
				szPasswordx, sizeof ( szPasswordx ) -1,
				szMail, sizeof ( szMail ) -1 );
				
			copy( eData[ Nick ], sizeof ( eData[ Nick ] ) -1, szNickx );
			copy( eData[ Password ], sizeof ( eData[ Password ] ) -1, szPasswordx );
			copy( eData[ Mail ], sizeof ( eData[ Mail ] ) -1, szMail );
			
			ArrayPushArray( g_aData, eData );
			g_iRegistrations++;
		}
		
		fclose( iFile );
	}

	//if(++g_iRegistrations!=g_iRegistrations)
		//log_to_file( "REGISTER-SYS.log", "Am incarcat cu succes %i nick-uri inregistrate!", g_iRegistrations );
}

SaveRegistrations( )
{
	if( file_exists( g_szRegisterFile ) )	delete_file( g_szRegisterFile );
		
	new iFile = fopen( g_szRegisterFile, "wt" ),eData[ eRegisterInfos ];
	
	for( new i; i < g_iRegistrations; i++ )
	{
		ArrayGetArray( g_aData, i, eData );

		fprintf( iFile, "^"%s^" ^"%s^" ^"%s^"^n",
			eData[ Nick ], eData[ Password ], eData[ Mail ] );
	}
	
	fclose( iFile );
}

UserIsRegistered( const szName[ ] )
{
	new eData[ eRegisterInfos ],bool:bRegistered = false;
	
	for( new i; i < g_iRegistrations; i++ )
	{
		ArrayGetArray( g_aData, i, eData );
		
		if( equali( szName, eData[ Nick ] ) )
		{
			bRegistered = true;
			break;
		}
	}
	
	return bRegistered;
}

public plugin_end( )
{
	SaveRegistrations( );
	ArrayDestroy( g_aData );
}


#if !defined BUG_TNI
stock xCoLoR( const id, const input[ ], any:... )
{
	new count = 1, players[ 32 ];
	static msg[ 191 ];

	vformat( msg, charsmax(msg), input, 3 );

	replace_all( msg, charsmax(msg), "!v", "^4" );
	replace_all( msg, charsmax(msg), "!n", "^1" );
	replace_all( msg, charsmax(msg), "!e", "^3" );
	replace_all( msg, charsmax(msg), "!e2", "^0" );

	if( id )
	{
		players[ 0 ] = id;
	}
	else get_players( players, count, "ch" );
	{
		for( new i = 0; i < count; i++ )
		{
			if( is_user_connected( players[ i ] ) )
			{
				message_begin( MSG_ONE_UNRELIABLE, get_user_msgid( "SayText" ), _, players[ i ] );
				write_byte( players[ i ] );
				write_string( msg );
				message_end( );
			}
		}
	}
}
#endif
